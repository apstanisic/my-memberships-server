import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  Unique,
  UpdateDateColumn,
  CreateDateColumn,
  ManyToOne,
  ManyToMany,
  OneToMany,
  Index
} from 'typeorm';
import { SerializeOptions } from '@nestjs/common';
import {
  IsEmail,
  validate,
  IsNotEmpty,
  MinLength,
  ValidationError
} from 'class-validator';
import * as bcrypt from 'bcryptjs';
import { Exclude } from 'class-transformer';
import BaseException from '../core/BaseException';
import * as uuid from 'uuid';
import { ObjectType, Field, ID } from 'type-graphql';
import { Company } from '../company/company.entity';
import { isBcryptHash } from '../core/helpers';
import { Subscription } from '../subscription/subscription.entity';
import { Role } from '../access-control/roles.entity';
import { checkPremissions } from '../access-control/check-premissions';
import { Permission } from '../access-control/roles-permissions/permissions.list';

@Entity('users')
@ObjectType({ description: 'User Model' })
export class User {
  /* Autogenerated unique ID */
  @Field(type => ID)
  @PrimaryGeneratedColumn('uuid')
  id: string;

  /* Companies where this user is owner */
  @OneToMany(type => Company, company => company.owner)
  @Field(type => [Company])
  ownedCompanies: Company[];

  /* All companies where this user is admin */
  @ManyToMany(type => Company, company => company.admins)
  @Field(type => [Company])
  companiesWhereAdmin: Company[];

  /* Every subscription user have or had in the past */
  @OneToMany(type => Subscription, subscription => subscription.owner)
  @Field(type => [Subscription])
  subscriptions: Subscription[];

  @OneToMany(type => Role, role => role.user, { eager: true })
  roles: Role[];
  /** User Email, has to be unique and to be valid email */
  @Column()
  @Index({ unique: true })
  @Field()
  @IsEmail()
  email: string;

  /** Password has at least 6 chars. It's hashed with bcrypt. It won't be returned */
  @Column()
  @IsNotEmpty()
  @MinLength(6)
  @Exclude()
  password: string;

  /** User real name */
  @Column()
  @Field()
  name: string;

  /** User's profile picture */
  @Column({ nullable: true })
  @Field({ nullable: true })
  avatar?: string;

  /** Users phone number. It's not required */
  @Column({ nullable: true })
  @Field({ nullable: true })
  phoneNumber?: string;

  /** Did user confirm his account */
  @Column({ default: false })
  @Exclude()
  confirmed: boolean;

  /** Can be used to confirm user, reset password, etc... */
  @Column({ nullable: true })
  @Exclude()
  secureToken?: string;

  /** Time when secureToken was created. Server decides token duration */
  @Column({ nullable: true })
  @Exclude()
  tokenCreatedAt?: Date;

  /** When was user last updated */
  @UpdateDateColumn()
  @Exclude()
  updatedAt: Date;

  /** When was user created */
  @CreateDateColumn()
  @Exclude()
  createdAt: Date;

  /** Check if provided password is valid */
  comparePassword(enteredPassword: string): Promise<boolean> {
    return bcrypt.compare(enteredPassword, this.password);
  }

  /** Change user password. This will hash password */
  async setPassword(password: string) {
    this.password = await bcrypt.hash(password, 12);
  }

  /** Generate secure token to be used for password reset... */
  generateSecureToken() {
    this.secureToken = uuid();
    this.tokenCreatedAt = new Date();
  }

  /**
   * Check if user has required premission.
   * If resource is not provided it will check if user is allowed for all
   * Example user.allowedTo('delete_company', 'fdsa0fdsaf')
   */
  allowedTo(
    permissions: Permission | Permission[],
    resourceId: string
  ): boolean {
    return checkPremissions({ permissions, resourceId, user: this });
  }

  /** Check if all fields are valid */
  async validate() {
    const error = await validate(this);
    // Password must be hashed with bcrypt. If not throw error
    if (!isBcryptHash(this.password)) {
      console.error(
        `Password almost passed unhashed! Attempted user: ${this.email}`
      );

      const hashError = new ValidationError();
      hashError.constraints['Invalid password'] =
        'Password problem. Please contact us.';
      hashError.target = 'password';

      error.push(hashError);
    }
    if (error.length > 0) throw new BaseException({ error });
  }
}
