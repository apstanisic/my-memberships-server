import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
  CreateDateColumn,
  ManyToOne,
  ManyToMany,
  JoinTable,
  OneToMany
} from 'typeorm';
import { IsEmail, MinLength, ValidateNested, validate } from 'class-validator';
import { Exclude, classToClass } from 'class-transformer';
import { ObjectType, Field, ID } from 'type-graphql';
import { Location } from './location.dto';
import { User } from '../user/user.entity';
import BaseException from '../core/BaseException';
import { Subscription } from '../subscription/subscription.entity';

@Entity('companies')
@ObjectType({ description: 'Company Model' })
export class Company {
  /* Autogenerated unique ID */
  @PrimaryGeneratedColumn('uuid')
  @Field(type => ID)
  id: string;

  /* Company name */
  @Column()
  @Field()
  @MinLength(6)
  name: string;

  /* Company owner */
  @ManyToOne(type => User, user => user.ownedCompanies)
  @Field(type => User)
  owner: User;

  /* Owner id */
  @Column()
  ownerId: string;

  /* Company admins */
  @ManyToMany(type => User, user => user.companiesWhereAdmin)
  @JoinTable()
  @Field(type => [User])
  @ValidateNested()
  admins: User[];

  @OneToMany(type => Subscription, subscription => subscription.company)
  @Field(type => [Subscription])
  subscriptions: Subscription[];

  /* Company's main phone number */
  @Column({ type: 'simple-array' })
  @Field(type => [String])
  @MinLength(8, { each: true })
  phoneNumbers: string[];

  /* Company's main email */
  @Column({ type: 'simple-array' })
  @Field(type => [String])
  @IsEmail({}, { each: true })
  emails: string[];

  /* All gyms location */
  // TODO: This probably causes problems
  @Column({ type: 'simple-json' })
  @Field(type => [Location])
  locations: Location[];

  /* When was user last updated */
  @UpdateDateColumn()
  @Exclude()
  updatedAt: Date;

  /* When was user created */
  @CreateDateColumn()
  @Exclude()
  createdAt: Date;

  /* Validate fields */
  async validate() {
    const error = await validate(classToClass(this));
    if (error.length > 0)
      throw new BaseException({ error, message: 'Bad parameters' });
  }
}
