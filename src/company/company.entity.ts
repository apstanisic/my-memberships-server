import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  Unique,
  UpdateDateColumn,
  CreateDateColumn,
  OneToMany,
  ManyToOne,
  ManyToMany,
  JoinTable
} from 'typeorm';
import { Injectable, SerializeOptions } from '@nestjs/common';
import {
  IsEmail,
  validate,
  IsNotEmpty,
  MinLength,
  ValidationError,
  ValidateNested
} from 'class-validator';
import * as bcrypt from 'bcryptjs';
import { Exclude } from 'class-transformer';
import BaseException from '../core/BaseException';
import uuid from 'uuid';
import { ObjectType, Field, ID } from 'type-graphql';
import { Location } from './location.dto';
import { User } from '../user/user.entity';

@ObjectType()
@Entity('users')
@SerializeOptions({ enableCircularCheck: true })
export class Company {
  /* Autogenerated unique ID */
  @PrimaryGeneratedColumn('uuid')
  @Field(type => ID)
  id: string;

  /* Gym name */
  @Column()
  @Field()
  @MinLength(6)
  name: string;

  /* Gym owner */
  @Column()
  @ManyToOne(type => User, user => user.ownedCompanies)
  @Field(type => User)
  owner: User;

  /* Gym admins */
  @ManyToMany(type => User, user => user.companiesWhereAdmin)
  @JoinTable()
  @Field(type => [User])
  @ValidateNested()
  admins: User[];

  /* This should go trough subscriptions */
  // /* Every user who is or was a member */
  // @Column({ default: [] })
  // @ManyToMany(type => User, user => user.)
  // @JoinTable()
  // @Field(type => [User!])
  // @ValidateNested()
  // members: User[];

  /* Gym's main phone number */
  @Column()
  @Field(type => [String])
  @MinLength(8, { each: true })
  phoneNumbers: string[];

  /* Gym's main email */
  @Column()
  @Field(type => [String])
  @IsEmail({}, { each: true })
  emails: string[];

  /* All gyms location */
  @Column()
  @Field(type => [Location])
  locations: Location[];

  /* When was user last updated */
  @UpdateDateColumn()
  @Exclude()
  updatedAt: Date;

  /* When was user created */
  @CreateDateColumn()
  @Exclude()
  createdAt: Date;
}
